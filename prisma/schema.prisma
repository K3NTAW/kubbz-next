generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model profiles {
  id         String   @id
  user_id    String   @unique
  username   String?  @unique
  full_name  String?
  created_at DateTime @default(now())
  updated_at DateTime
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
  id             String     @id
  name           String?
  email          String?    @unique
  email_verified DateTime?
  image          String?
  password       String?
  user_metadata  Json?
  accounts       accounts[]
  profiles       profiles?
  sessions       sessions[]
  tournaments    Tournament[] @relation("UserTournaments")
  galleryPhotos  Gallery[]    @relation("UserGalleryPhotos")
  registrations  TournamentRegistration[]
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tournament {
  id                String   @id @default(uuid())
  title             String
  name              String
  description       String?
  googleMapsUrl     String?
  price             Float?
  maxPeople         Int
  registeredPeople  Int      @default(0)
  date              DateTime
  createdBy         String
  creator           users    @relation("UserTournaments", fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  galleryPhotos     Gallery[]
  registrations     TournamentRegistration[]
}

model Gallery {
  id        String   @id @default(uuid())
  imageUrl  String
  userId    String
  user      users    @relation("UserGalleryPhotos", fields: [userId], references: [id], onDelete: Cascade)
  tournamentId String?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  createdAt DateTime @default(now())
}

model TournamentRegistration {
  id           String   @id @default(uuid())
  userId       String
  tournamentId String
  name         String? // Name of the person being registered (can be different from user)
  createdAt    DateTime @default(now())

  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([userId, tournamentId])
}
